exit
c
exit
sdfas
oooeooweowoweoweoweoweowowwowewweoiweoiweoiweoiweioewiowioewiioewiowiweiowwwioweioweioewoiweioweioewioweioweioweioweioweioweiwi
c
exit
self
move
m
c
move
c
self
@moves
c
@board.empty?(tile)
tile
n
move
c
move
c
move
c
move
c
move
c
move
n
move
tile
n
move
self
move
c
move
c
move
c
move
@moves
c
@moves
self
c
move
@moves
n
@board.empty?(tile)
@board.in_bounds?(tile)
tile
n
move
n
@board.in_bounds?(tile)
tile
n
move
@moves
n
@board.empty?(tile)
@board.in_bounds?(tile)
tile
n
tile
n
move
n
tile
@board.empty?(tile)
tile
n
@board.in_bounds?(tile)
@board.in_boards?(tile)
tile
n
move
self
exit
c
exit
c
self
c
self.first
self[0]
self
self[0][1]
self
n
@moves
n
@moves
self
this
exit
c
n
c
n
c
coord
coords
exit
b[[1,1]].movement
b[[0,2]].movement
b[[0,2]]
b[[0,3]].movement
b = Board.new
find_king :black
c
display self
exit
displ self
exit
display self
exit
display self
self
c
piece
self
c
self
piece
c
in_check?(:black)
piece.movement.include?(throne)
throne
find_king :black
find_king? :black
piece.movement
peice.movement
display piece
exit
piece.moves
find_king(color).pos
c
find_king(color).pos
c
find_king(color).pos
throne
c
throne = find_king(color).pos
find_king(color).pos
find_king :black
color
throne
c
find_king :black
@rows
piece
peice
c
piece
exit
move
piece
c
exit
c
vine
c
piece
c
piece
c
